// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Column.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Column.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Column_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Column_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Column_2eproto() {
  protobuf_AddDesc_Column_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Column.proto");
  GOOGLE_CHECK(file != NULL);
  Column_descriptor_ = file->message_type(0);
  static const int Column_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, distribution_key_),
  };
  Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Column_descriptor_,
      Column::default_instance_,
      Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Column));
  Column_Type_descriptor_ = Column_descriptor_->enum_type(0);
  ColumnInfo_descriptor_ = file->message_type(1);
  static const int ColumnInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, distribution_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, length_),
  };
  ColumnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnInfo_descriptor_,
      ColumnInfo::default_instance_,
      ColumnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnInfo));
  ColumnValue_descriptor_ = file->message_type(2);
  static const int ColumnValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, distribution_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, value_),
  };
  ColumnValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnValue_descriptor_,
      ColumnValue::default_instance_,
      ColumnValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Column_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Column_descriptor_, &Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnInfo_descriptor_, &ColumnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnValue_descriptor_, &ColumnValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Column_2eproto() {
  delete Column::default_instance_;
  delete Column_reflection_;
  delete ColumnInfo::default_instance_;
  delete ColumnInfo_reflection_;
  delete ColumnValue::default_instance_;
  delete ColumnValue_reflection_;
}

void protobuf_AddDesc_Column_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Column.proto\"\336\001\n\006Column\022\014\n\004name\030\001 \002(\t\022"
    "\032\n\004type\030\002 \001(\0162\014.Column.Type\022\023\n\013primary_k"
    "ey\030\003 \001(\010\022\030\n\020distribution_key\030\004 \001(\010\"{\n\004Ty"
    "pe\022\010\n\004BOOL\020\001\022\t\n\005INT32\020\007\022\n\n\006UINT32\020\010\022\t\n\005I"
    "NT64\020\t\022\n\n\006UINT64\020\n\022\t\n\005FLOAT\020\013\022\n\n\006DOUBLE\020"
    "\014\022\010\n\004CHAR\020\016\022\013\n\007VARCHAR\020\027\022\r\n\tVARBINARY\020\030\""
    "u\n\nColumnInfo\022\014\n\004name\030\001 \002(\t\022\032\n\004type\030\002 \002("
    "\0162\014.Column.Type\022\023\n\013primary_key\030\003 \001(\010\022\030\n\020"
    "distribution_key\030\004 \001(\010\022\016\n\006length\030\006 \001(\005\"u"
    "\n\013ColumnValue\022\014\n\004name\030\001 \002(\t\022\032\n\004type\030\002 \001("
    "\0162\014.Column.Type\022\023\n\013primary_key\030\003 \001(\010\022\030\n\020"
    "distribution_key\030\004 \001(\010\022\r\n\005value\030\005 \002(\014", 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Column.proto", &protobuf_RegisterTypes);
  Column::default_instance_ = new Column();
  ColumnInfo::default_instance_ = new ColumnInfo();
  ColumnValue::default_instance_ = new ColumnValue();
  Column::default_instance_->InitAsDefaultInstance();
  ColumnInfo::default_instance_->InitAsDefaultInstance();
  ColumnValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Column_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Column_2eproto {
  StaticDescriptorInitializer_Column_2eproto() {
    protobuf_AddDesc_Column_2eproto();
  }
} static_descriptor_initializer_Column_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Column_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_Type_descriptor_;
}
bool Column_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Column_Type Column::BOOL;
const Column_Type Column::INT32;
const Column_Type Column::UINT32;
const Column_Type Column::INT64;
const Column_Type Column::UINT64;
const Column_Type Column::FLOAT;
const Column_Type Column::DOUBLE;
const Column_Type Column::CHAR;
const Column_Type Column::VARCHAR;
const Column_Type Column::VARBINARY;
const Column_Type Column::Type_MIN;
const Column_Type Column::Type_MAX;
const int Column::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Column::kNameFieldNumber;
const int Column::kTypeFieldNumber;
const int Column::kPrimaryKeyFieldNumber;
const int Column::kDistributionKeyFieldNumber;
#endif  // !_MSC_VER

Column::Column()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Column)
}

void Column::InitAsDefaultInstance() {
}

Column::Column(const Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Column)
}

void Column::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  primary_key_ = false;
  distribution_key_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:Column)
  SharedDtor();
}

void Column::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_descriptor_;
}

const Column& Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Column_2eproto();
  return *default_instance_;
}

Column* Column::default_instance_ = NULL;

Column* Column::New() const {
  return new Column;
}

void Column::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Column*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(primary_key_, distribution_key_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Column.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Column_Type_IsValid(value)) {
            set_type(static_cast< ::Column_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_primary_key;
        break;
      }

      // optional bool primary_key = 3;
      case 3: {
        if (tag == 24) {
         parse_primary_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_key_)));
          set_has_primary_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_distribution_key;
        break;
      }

      // optional bool distribution_key = 4;
      case 4: {
        if (tag == 32) {
         parse_distribution_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distribution_key_)));
          set_has_distribution_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Column)
  return false;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Column)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .Column.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool primary_key = 3;
  if (has_primary_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->primary_key(), output);
  }

  // optional bool distribution_key = 4;
  if (has_distribution_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->distribution_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Column)
}

::google::protobuf::uint8* Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Column)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .Column.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool primary_key = 3;
  if (has_primary_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->primary_key(), target);
  }

  // optional bool distribution_key = 4;
  if (has_distribution_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->distribution_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Column)
  return target;
}

int Column::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Column.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool primary_key = 3;
    if (has_primary_key()) {
      total_size += 1 + 1;
    }

    // optional bool distribution_key = 4;
    if (has_distribution_key()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_primary_key()) {
      set_primary_key(from.primary_key());
    }
    if (from.has_distribution_key()) {
      set_distribution_key(from.distribution_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Column::Swap(Column* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(primary_key_, other->primary_key_);
    std::swap(distribution_key_, other->distribution_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Column_descriptor_;
  metadata.reflection = Column_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnInfo::kNameFieldNumber;
const int ColumnInfo::kTypeFieldNumber;
const int ColumnInfo::kPrimaryKeyFieldNumber;
const int ColumnInfo::kDistributionKeyFieldNumber;
const int ColumnInfo::kLengthFieldNumber;
#endif  // !_MSC_VER

ColumnInfo::ColumnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColumnInfo)
}

void ColumnInfo::InitAsDefaultInstance() {
}

ColumnInfo::ColumnInfo(const ColumnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ColumnInfo)
}

void ColumnInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  primary_key_ = false;
  distribution_key_ = false;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnInfo::~ColumnInfo() {
  // @@protoc_insertion_point(destructor:ColumnInfo)
  SharedDtor();
}

void ColumnInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ColumnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnInfo_descriptor_;
}

const ColumnInfo& ColumnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Column_2eproto();
  return *default_instance_;
}

ColumnInfo* ColumnInfo::default_instance_ = NULL;

ColumnInfo* ColumnInfo::New() const {
  return new ColumnInfo;
}

void ColumnInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(primary_key_, length_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ColumnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Column.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Column_Type_IsValid(value)) {
            set_type(static_cast< ::Column_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_primary_key;
        break;
      }

      // optional bool primary_key = 3;
      case 3: {
        if (tag == 24) {
         parse_primary_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_key_)));
          set_has_primary_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_distribution_key;
        break;
      }

      // optional bool distribution_key = 4;
      case 4: {
        if (tag == 32) {
         parse_distribution_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distribution_key_)));
          set_has_distribution_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_length;
        break;
      }

      // optional int32 length = 6;
      case 6: {
        if (tag == 48) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColumnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColumnInfo)
  return false;
#undef DO_
}

void ColumnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColumnInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .Column.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool primary_key = 3;
  if (has_primary_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->primary_key(), output);
  }

  // optional bool distribution_key = 4;
  if (has_distribution_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->distribution_key(), output);
  }

  // optional int32 length = 6;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ColumnInfo)
}

::google::protobuf::uint8* ColumnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColumnInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .Column.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool primary_key = 3;
  if (has_primary_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->primary_key(), target);
  }

  // optional bool distribution_key = 4;
  if (has_distribution_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->distribution_key(), target);
  }

  // optional int32 length = 6;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColumnInfo)
  return target;
}

int ColumnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Column.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool primary_key = 3;
    if (has_primary_key()) {
      total_size += 1 + 1;
    }

    // optional bool distribution_key = 4;
    if (has_distribution_key()) {
      total_size += 1 + 1;
    }

    // optional int32 length = 6;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnInfo::MergeFrom(const ColumnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_primary_key()) {
      set_primary_key(from.primary_key());
    }
    if (from.has_distribution_key()) {
      set_distribution_key(from.distribution_key());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnInfo::CopyFrom(const ColumnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ColumnInfo::Swap(ColumnInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(primary_key_, other->primary_key_);
    std::swap(distribution_key_, other->distribution_key_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnInfo_descriptor_;
  metadata.reflection = ColumnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnValue::kNameFieldNumber;
const int ColumnValue::kTypeFieldNumber;
const int ColumnValue::kPrimaryKeyFieldNumber;
const int ColumnValue::kDistributionKeyFieldNumber;
const int ColumnValue::kValueFieldNumber;
#endif  // !_MSC_VER

ColumnValue::ColumnValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ColumnValue)
}

void ColumnValue::InitAsDefaultInstance() {
}

ColumnValue::ColumnValue(const ColumnValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ColumnValue)
}

void ColumnValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  primary_key_ = false;
  distribution_key_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnValue::~ColumnValue() {
  // @@protoc_insertion_point(destructor:ColumnValue)
  SharedDtor();
}

void ColumnValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ColumnValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnValue_descriptor_;
}

const ColumnValue& ColumnValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Column_2eproto();
  return *default_instance_;
}

ColumnValue* ColumnValue::default_instance_ = NULL;

ColumnValue* ColumnValue::New() const {
  return new ColumnValue;
}

void ColumnValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ColumnValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(primary_key_, distribution_key_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ColumnValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Column.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Column_Type_IsValid(value)) {
            set_type(static_cast< ::Column_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_primary_key;
        break;
      }

      // optional bool primary_key = 3;
      case 3: {
        if (tag == 24) {
         parse_primary_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_key_)));
          set_has_primary_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_distribution_key;
        break;
      }

      // optional bool distribution_key = 4;
      case 4: {
        if (tag == 32) {
         parse_distribution_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distribution_key_)));
          set_has_distribution_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // required bytes value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ColumnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ColumnValue)
  return false;
#undef DO_
}

void ColumnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ColumnValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .Column.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool primary_key = 3;
  if (has_primary_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->primary_key(), output);
  }

  // optional bool distribution_key = 4;
  if (has_distribution_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->distribution_key(), output);
  }

  // required bytes value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ColumnValue)
}

::google::protobuf::uint8* ColumnValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColumnValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .Column.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool primary_key = 3;
  if (has_primary_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->primary_key(), target);
  }

  // optional bool distribution_key = 4;
  if (has_distribution_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->distribution_key(), target);
  }

  // required bytes value = 5;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColumnValue)
  return target;
}

int ColumnValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Column.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool primary_key = 3;
    if (has_primary_key()) {
      total_size += 1 + 1;
    }

    // optional bool distribution_key = 4;
    if (has_distribution_key()) {
      total_size += 1 + 1;
    }

    // required bytes value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnValue::MergeFrom(const ColumnValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_primary_key()) {
      set_primary_key(from.primary_key());
    }
    if (from.has_distribution_key()) {
      set_distribution_key(from.distribution_key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnValue::CopyFrom(const ColumnValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  return true;
}

void ColumnValue::Swap(ColumnValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(primary_key_, other->primary_key_);
    std::swap(distribution_key_, other->distribution_key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnValue_descriptor_;
  metadata.reflection = ColumnValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
