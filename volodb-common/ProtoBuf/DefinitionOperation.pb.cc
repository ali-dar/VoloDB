// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DefinitionOperation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DefinitionOperation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DefinitionOpertion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefinitionOpertion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDatabaseOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDatabaseOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropDatabaseOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropDatabaseOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStoreOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStoreOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropStoreOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropStoreOperation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DefinitionOperation_2eproto() {
  protobuf_AddDesc_DefinitionOperation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DefinitionOperation.proto");
  GOOGLE_CHECK(file != NULL);
  DefinitionOpertion_descriptor_ = file->message_type(0);
  static const int DefinitionOpertion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinitionOpertion, store_info_),
  };
  DefinitionOpertion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefinitionOpertion_descriptor_,
      DefinitionOpertion::default_instance_,
      DefinitionOpertion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinitionOpertion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinitionOpertion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefinitionOpertion));
  CreateDatabaseOperation_descriptor_ = file->message_type(1);
  static const int CreateDatabaseOperation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseOperation, database_name_),
  };
  CreateDatabaseOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateDatabaseOperation_descriptor_,
      CreateDatabaseOperation::default_instance_,
      CreateDatabaseOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateDatabaseOperation));
  DropDatabaseOperation_descriptor_ = file->message_type(2);
  static const int DropDatabaseOperation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseOperation, database_name_),
  };
  DropDatabaseOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropDatabaseOperation_descriptor_,
      DropDatabaseOperation::default_instance_,
      DropDatabaseOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropDatabaseOperation));
  CreateStoreOperation_descriptor_ = file->message_type(3);
  static const int CreateStoreOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStoreOperation, store_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStoreOperation, column_),
  };
  CreateStoreOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStoreOperation_descriptor_,
      CreateStoreOperation::default_instance_,
      CreateStoreOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStoreOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStoreOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStoreOperation));
  DropStoreOperation_descriptor_ = file->message_type(4);
  static const int DropStoreOperation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropStoreOperation, store_info_),
  };
  DropStoreOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropStoreOperation_descriptor_,
      DropStoreOperation::default_instance_,
      DropStoreOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropStoreOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropStoreOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropStoreOperation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DefinitionOperation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefinitionOpertion_descriptor_, &DefinitionOpertion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateDatabaseOperation_descriptor_, &CreateDatabaseOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropDatabaseOperation_descriptor_, &DropDatabaseOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStoreOperation_descriptor_, &CreateStoreOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropStoreOperation_descriptor_, &DropStoreOperation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DefinitionOperation_2eproto() {
  delete DefinitionOpertion::default_instance_;
  delete DefinitionOpertion_reflection_;
  delete CreateDatabaseOperation::default_instance_;
  delete CreateDatabaseOperation_reflection_;
  delete DropDatabaseOperation::default_instance_;
  delete DropDatabaseOperation_reflection_;
  delete CreateStoreOperation::default_instance_;
  delete CreateStoreOperation_reflection_;
  delete DropStoreOperation::default_instance_;
  delete DropStoreOperation_reflection_;
}

void protobuf_AddDesc_DefinitionOperation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Column_2eproto();
  ::protobuf_AddDesc_Operation_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031DefinitionOperation.proto\032\014Column.prot"
    "o\032\017Operation.proto\"4\n\022DefinitionOpertion"
    "\022\036\n\nstore_info\030\001 \002(\0132\n.StoreInfo\"0\n\027Crea"
    "teDatabaseOperation\022\025\n\rdatabase_name\030\001 \002"
    "(\t\".\n\025DropDatabaseOperation\022\025\n\rdatabase_"
    "name\030\001 \002(\t\"S\n\024CreateStoreOperation\022\036\n\nst"
    "ore_info\030\001 \002(\0132\n.StoreInfo\022\033\n\006column\030\002 \003"
    "(\0132\013.ColumnInfo\"4\n\022DropStoreOperation\022\036\n"
    "\nstore_info\030\001 \002(\0132\n.StoreInfo", 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DefinitionOperation.proto", &protobuf_RegisterTypes);
  DefinitionOpertion::default_instance_ = new DefinitionOpertion();
  CreateDatabaseOperation::default_instance_ = new CreateDatabaseOperation();
  DropDatabaseOperation::default_instance_ = new DropDatabaseOperation();
  CreateStoreOperation::default_instance_ = new CreateStoreOperation();
  DropStoreOperation::default_instance_ = new DropStoreOperation();
  DefinitionOpertion::default_instance_->InitAsDefaultInstance();
  CreateDatabaseOperation::default_instance_->InitAsDefaultInstance();
  DropDatabaseOperation::default_instance_->InitAsDefaultInstance();
  CreateStoreOperation::default_instance_->InitAsDefaultInstance();
  DropStoreOperation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DefinitionOperation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DefinitionOperation_2eproto {
  StaticDescriptorInitializer_DefinitionOperation_2eproto() {
    protobuf_AddDesc_DefinitionOperation_2eproto();
  }
} static_descriptor_initializer_DefinitionOperation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DefinitionOpertion::kStoreInfoFieldNumber;
#endif  // !_MSC_VER

DefinitionOpertion::DefinitionOpertion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DefinitionOpertion)
}

void DefinitionOpertion::InitAsDefaultInstance() {
  store_info_ = const_cast< ::StoreInfo*>(&::StoreInfo::default_instance());
}

DefinitionOpertion::DefinitionOpertion(const DefinitionOpertion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DefinitionOpertion)
}

void DefinitionOpertion::SharedCtor() {
  _cached_size_ = 0;
  store_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefinitionOpertion::~DefinitionOpertion() {
  // @@protoc_insertion_point(destructor:DefinitionOpertion)
  SharedDtor();
}

void DefinitionOpertion::SharedDtor() {
  if (this != default_instance_) {
    delete store_info_;
  }
}

void DefinitionOpertion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefinitionOpertion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefinitionOpertion_descriptor_;
}

const DefinitionOpertion& DefinitionOpertion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DefinitionOperation_2eproto();
  return *default_instance_;
}

DefinitionOpertion* DefinitionOpertion::default_instance_ = NULL;

DefinitionOpertion* DefinitionOpertion::New() const {
  return new DefinitionOpertion;
}

void DefinitionOpertion::Clear() {
  if (has_store_info()) {
    if (store_info_ != NULL) store_info_->::StoreInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefinitionOpertion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DefinitionOpertion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StoreInfo store_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DefinitionOpertion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DefinitionOpertion)
  return false;
#undef DO_
}

void DefinitionOpertion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DefinitionOpertion)
  // required .StoreInfo store_info = 1;
  if (has_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DefinitionOpertion)
}

::google::protobuf::uint8* DefinitionOpertion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DefinitionOpertion)
  // required .StoreInfo store_info = 1;
  if (has_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DefinitionOpertion)
  return target;
}

int DefinitionOpertion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .StoreInfo store_info = 1;
    if (has_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefinitionOpertion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefinitionOpertion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefinitionOpertion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefinitionOpertion::MergeFrom(const DefinitionOpertion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_info()) {
      mutable_store_info()->::StoreInfo::MergeFrom(from.store_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefinitionOpertion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefinitionOpertion::CopyFrom(const DefinitionOpertion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefinitionOpertion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_store_info()) {
    if (!this->store_info().IsInitialized()) return false;
  }
  return true;
}

void DefinitionOpertion::Swap(DefinitionOpertion* other) {
  if (other != this) {
    std::swap(store_info_, other->store_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefinitionOpertion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefinitionOpertion_descriptor_;
  metadata.reflection = DefinitionOpertion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateDatabaseOperation::kDatabaseNameFieldNumber;
#endif  // !_MSC_VER

CreateDatabaseOperation::CreateDatabaseOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateDatabaseOperation)
}

void CreateDatabaseOperation::InitAsDefaultInstance() {
}

CreateDatabaseOperation::CreateDatabaseOperation(const CreateDatabaseOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateDatabaseOperation)
}

void CreateDatabaseOperation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  database_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateDatabaseOperation::~CreateDatabaseOperation() {
  // @@protoc_insertion_point(destructor:CreateDatabaseOperation)
  SharedDtor();
}

void CreateDatabaseOperation::SharedDtor() {
  if (database_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete database_name_;
  }
  if (this != default_instance_) {
  }
}

void CreateDatabaseOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDatabaseOperation_descriptor_;
}

const CreateDatabaseOperation& CreateDatabaseOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DefinitionOperation_2eproto();
  return *default_instance_;
}

CreateDatabaseOperation* CreateDatabaseOperation::default_instance_ = NULL;

CreateDatabaseOperation* CreateDatabaseOperation::New() const {
  return new CreateDatabaseOperation;
}

void CreateDatabaseOperation::Clear() {
  if (has_database_name()) {
    if (database_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      database_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateDatabaseOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateDatabaseOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string database_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database_name().data(), this->database_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "database_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateDatabaseOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateDatabaseOperation)
  return false;
#undef DO_
}

void CreateDatabaseOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateDatabaseOperation)
  // required string database_name = 1;
  if (has_database_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_name().data(), this->database_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "database_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateDatabaseOperation)
}

::google::protobuf::uint8* CreateDatabaseOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateDatabaseOperation)
  // required string database_name = 1;
  if (has_database_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_name().data(), this->database_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "database_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateDatabaseOperation)
  return target;
}

int CreateDatabaseOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string database_name = 1;
    if (has_database_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateDatabaseOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateDatabaseOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDatabaseOperation::MergeFrom(const CreateDatabaseOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_database_name()) {
      set_database_name(from.database_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateDatabaseOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseOperation::CopyFrom(const CreateDatabaseOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateDatabaseOperation::Swap(CreateDatabaseOperation* other) {
  if (other != this) {
    std::swap(database_name_, other->database_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateDatabaseOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDatabaseOperation_descriptor_;
  metadata.reflection = CreateDatabaseOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropDatabaseOperation::kDatabaseNameFieldNumber;
#endif  // !_MSC_VER

DropDatabaseOperation::DropDatabaseOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DropDatabaseOperation)
}

void DropDatabaseOperation::InitAsDefaultInstance() {
}

DropDatabaseOperation::DropDatabaseOperation(const DropDatabaseOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DropDatabaseOperation)
}

void DropDatabaseOperation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  database_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropDatabaseOperation::~DropDatabaseOperation() {
  // @@protoc_insertion_point(destructor:DropDatabaseOperation)
  SharedDtor();
}

void DropDatabaseOperation::SharedDtor() {
  if (database_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete database_name_;
  }
  if (this != default_instance_) {
  }
}

void DropDatabaseOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropDatabaseOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropDatabaseOperation_descriptor_;
}

const DropDatabaseOperation& DropDatabaseOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DefinitionOperation_2eproto();
  return *default_instance_;
}

DropDatabaseOperation* DropDatabaseOperation::default_instance_ = NULL;

DropDatabaseOperation* DropDatabaseOperation::New() const {
  return new DropDatabaseOperation;
}

void DropDatabaseOperation::Clear() {
  if (has_database_name()) {
    if (database_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      database_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropDatabaseOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DropDatabaseOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string database_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database_name().data(), this->database_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "database_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DropDatabaseOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DropDatabaseOperation)
  return false;
#undef DO_
}

void DropDatabaseOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DropDatabaseOperation)
  // required string database_name = 1;
  if (has_database_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_name().data(), this->database_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "database_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DropDatabaseOperation)
}

::google::protobuf::uint8* DropDatabaseOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DropDatabaseOperation)
  // required string database_name = 1;
  if (has_database_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_name().data(), this->database_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "database_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DropDatabaseOperation)
  return target;
}

int DropDatabaseOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string database_name = 1;
    if (has_database_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropDatabaseOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropDatabaseOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropDatabaseOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropDatabaseOperation::MergeFrom(const DropDatabaseOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_database_name()) {
      set_database_name(from.database_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropDatabaseOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropDatabaseOperation::CopyFrom(const DropDatabaseOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DropDatabaseOperation::Swap(DropDatabaseOperation* other) {
  if (other != this) {
    std::swap(database_name_, other->database_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropDatabaseOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropDatabaseOperation_descriptor_;
  metadata.reflection = DropDatabaseOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStoreOperation::kStoreInfoFieldNumber;
const int CreateStoreOperation::kColumnFieldNumber;
#endif  // !_MSC_VER

CreateStoreOperation::CreateStoreOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateStoreOperation)
}

void CreateStoreOperation::InitAsDefaultInstance() {
  store_info_ = const_cast< ::StoreInfo*>(&::StoreInfo::default_instance());
}

CreateStoreOperation::CreateStoreOperation(const CreateStoreOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateStoreOperation)
}

void CreateStoreOperation::SharedCtor() {
  _cached_size_ = 0;
  store_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStoreOperation::~CreateStoreOperation() {
  // @@protoc_insertion_point(destructor:CreateStoreOperation)
  SharedDtor();
}

void CreateStoreOperation::SharedDtor() {
  if (this != default_instance_) {
    delete store_info_;
  }
}

void CreateStoreOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStoreOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStoreOperation_descriptor_;
}

const CreateStoreOperation& CreateStoreOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DefinitionOperation_2eproto();
  return *default_instance_;
}

CreateStoreOperation* CreateStoreOperation::default_instance_ = NULL;

CreateStoreOperation* CreateStoreOperation::New() const {
  return new CreateStoreOperation;
}

void CreateStoreOperation::Clear() {
  if (has_store_info()) {
    if (store_info_ != NULL) store_info_->::StoreInfo::Clear();
  }
  column_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStoreOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateStoreOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StoreInfo store_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column;
        break;
      }

      // repeated .ColumnInfo column = 2;
      case 2: {
        if (tag == 18) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateStoreOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateStoreOperation)
  return false;
#undef DO_
}

void CreateStoreOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateStoreOperation)
  // required .StoreInfo store_info = 1;
  if (has_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store_info(), output);
  }

  // repeated .ColumnInfo column = 2;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateStoreOperation)
}

::google::protobuf::uint8* CreateStoreOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateStoreOperation)
  // required .StoreInfo store_info = 1;
  if (has_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store_info(), target);
  }

  // repeated .ColumnInfo column = 2;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateStoreOperation)
  return target;
}

int CreateStoreOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .StoreInfo store_info = 1;
    if (has_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_info());
    }

  }
  // repeated .ColumnInfo column = 2;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStoreOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStoreOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStoreOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStoreOperation::MergeFrom(const CreateStoreOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_info()) {
      mutable_store_info()->::StoreInfo::MergeFrom(from.store_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStoreOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStoreOperation::CopyFrom(const CreateStoreOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStoreOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_store_info()) {
    if (!this->store_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->column())) return false;
  return true;
}

void CreateStoreOperation::Swap(CreateStoreOperation* other) {
  if (other != this) {
    std::swap(store_info_, other->store_info_);
    column_.Swap(&other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStoreOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStoreOperation_descriptor_;
  metadata.reflection = CreateStoreOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropStoreOperation::kStoreInfoFieldNumber;
#endif  // !_MSC_VER

DropStoreOperation::DropStoreOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DropStoreOperation)
}

void DropStoreOperation::InitAsDefaultInstance() {
  store_info_ = const_cast< ::StoreInfo*>(&::StoreInfo::default_instance());
}

DropStoreOperation::DropStoreOperation(const DropStoreOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DropStoreOperation)
}

void DropStoreOperation::SharedCtor() {
  _cached_size_ = 0;
  store_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropStoreOperation::~DropStoreOperation() {
  // @@protoc_insertion_point(destructor:DropStoreOperation)
  SharedDtor();
}

void DropStoreOperation::SharedDtor() {
  if (this != default_instance_) {
    delete store_info_;
  }
}

void DropStoreOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropStoreOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropStoreOperation_descriptor_;
}

const DropStoreOperation& DropStoreOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DefinitionOperation_2eproto();
  return *default_instance_;
}

DropStoreOperation* DropStoreOperation::default_instance_ = NULL;

DropStoreOperation* DropStoreOperation::New() const {
  return new DropStoreOperation;
}

void DropStoreOperation::Clear() {
  if (has_store_info()) {
    if (store_info_ != NULL) store_info_->::StoreInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropStoreOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DropStoreOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StoreInfo store_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DropStoreOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DropStoreOperation)
  return false;
#undef DO_
}

void DropStoreOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DropStoreOperation)
  // required .StoreInfo store_info = 1;
  if (has_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DropStoreOperation)
}

::google::protobuf::uint8* DropStoreOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DropStoreOperation)
  // required .StoreInfo store_info = 1;
  if (has_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DropStoreOperation)
  return target;
}

int DropStoreOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .StoreInfo store_info = 1;
    if (has_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropStoreOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropStoreOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropStoreOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropStoreOperation::MergeFrom(const DropStoreOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_info()) {
      mutable_store_info()->::StoreInfo::MergeFrom(from.store_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropStoreOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropStoreOperation::CopyFrom(const DropStoreOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropStoreOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_store_info()) {
    if (!this->store_info().IsInitialized()) return false;
  }
  return true;
}

void DropStoreOperation::Swap(DropStoreOperation* other) {
  if (other != this) {
    std::swap(store_info_, other->store_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropStoreOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropStoreOperation_descriptor_;
  metadata.reflection = DropStoreOperation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
