// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Column.proto

#ifndef PROTOBUF_Column_2eproto__INCLUDED
#define PROTOBUF_Column_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Column_2eproto();
void protobuf_AssignDesc_Column_2eproto();
void protobuf_ShutdownFile_Column_2eproto();

class Column;
class ColumnInfo;
class ColumnValue;

enum Column_Type {
  Column_Type_BOOL = 1,
  Column_Type_INT32 = 7,
  Column_Type_UINT32 = 8,
  Column_Type_INT64 = 9,
  Column_Type_UINT64 = 10,
  Column_Type_FLOAT = 11,
  Column_Type_DOUBLE = 12,
  Column_Type_CHAR = 14,
  Column_Type_VARCHAR = 23,
  Column_Type_VARBINARY = 24
};
bool Column_Type_IsValid(int value);
const Column_Type Column_Type_Type_MIN = Column_Type_BOOL;
const Column_Type Column_Type_Type_MAX = Column_Type_VARBINARY;
const int Column_Type_Type_ARRAYSIZE = Column_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Column_Type_descriptor();
inline const ::std::string& Column_Type_Name(Column_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Column_Type_descriptor(), value);
}
inline bool Column_Type_Parse(
    const ::std::string& name, Column_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Column_Type>(
    Column_Type_descriptor(), name, value);
}
// ===================================================================

class Column : public ::google::protobuf::Message {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Column& default_instance();

  void Swap(Column* other);

  // implements Message ----------------------------------------------

  Column* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Column_Type Type;
  static const Type BOOL = Column_Type_BOOL;
  static const Type INT32 = Column_Type_INT32;
  static const Type UINT32 = Column_Type_UINT32;
  static const Type INT64 = Column_Type_INT64;
  static const Type UINT64 = Column_Type_UINT64;
  static const Type FLOAT = Column_Type_FLOAT;
  static const Type DOUBLE = Column_Type_DOUBLE;
  static const Type CHAR = Column_Type_CHAR;
  static const Type VARCHAR = Column_Type_VARCHAR;
  static const Type VARBINARY = Column_Type_VARBINARY;
  static inline bool Type_IsValid(int value) {
    return Column_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Column_Type_Type_MIN;
  static const Type Type_MAX =
    Column_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Column_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Column_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Column_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Column_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Column.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Column_Type type() const;
  inline void set_type(::Column_Type value);

  // optional bool primary_key = 3;
  inline bool has_primary_key() const;
  inline void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  inline bool primary_key() const;
  inline void set_primary_key(bool value);

  // optional bool distribution_key = 4;
  inline bool has_distribution_key() const;
  inline void clear_distribution_key();
  static const int kDistributionKeyFieldNumber = 4;
  inline bool distribution_key() const;
  inline void set_distribution_key(bool value);

  // @@protoc_insertion_point(class_scope:Column)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_primary_key();
  inline void clear_has_primary_key();
  inline void set_has_distribution_key();
  inline void clear_has_distribution_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  bool primary_key_;
  bool distribution_key_;
  friend void  protobuf_AddDesc_Column_2eproto();
  friend void protobuf_AssignDesc_Column_2eproto();
  friend void protobuf_ShutdownFile_Column_2eproto();

  void InitAsDefaultInstance();
  static Column* default_instance_;
};
// -------------------------------------------------------------------

class ColumnInfo : public ::google::protobuf::Message {
 public:
  ColumnInfo();
  virtual ~ColumnInfo();

  ColumnInfo(const ColumnInfo& from);

  inline ColumnInfo& operator=(const ColumnInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnInfo& default_instance();

  void Swap(ColumnInfo* other);

  // implements Message ----------------------------------------------

  ColumnInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnInfo& from);
  void MergeFrom(const ColumnInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .Column.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Column_Type type() const;
  inline void set_type(::Column_Type value);

  // optional bool primary_key = 3;
  inline bool has_primary_key() const;
  inline void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  inline bool primary_key() const;
  inline void set_primary_key(bool value);

  // optional bool distribution_key = 4;
  inline bool has_distribution_key() const;
  inline void clear_distribution_key();
  static const int kDistributionKeyFieldNumber = 4;
  inline bool distribution_key() const;
  inline void set_distribution_key(bool value);

  // optional int32 length = 6;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 6;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ColumnInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_primary_key();
  inline void clear_has_primary_key();
  inline void set_has_distribution_key();
  inline void clear_has_distribution_key();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  bool primary_key_;
  bool distribution_key_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_Column_2eproto();
  friend void protobuf_AssignDesc_Column_2eproto();
  friend void protobuf_ShutdownFile_Column_2eproto();

  void InitAsDefaultInstance();
  static ColumnInfo* default_instance_;
};
// -------------------------------------------------------------------

class ColumnValue : public ::google::protobuf::Message {
 public:
  ColumnValue();
  virtual ~ColumnValue();

  ColumnValue(const ColumnValue& from);

  inline ColumnValue& operator=(const ColumnValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnValue& default_instance();

  void Swap(ColumnValue* other);

  // implements Message ----------------------------------------------

  ColumnValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnValue& from);
  void MergeFrom(const ColumnValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Column.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Column_Type type() const;
  inline void set_type(::Column_Type value);

  // optional bool primary_key = 3;
  inline bool has_primary_key() const;
  inline void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  inline bool primary_key() const;
  inline void set_primary_key(bool value);

  // optional bool distribution_key = 4;
  inline bool has_distribution_key() const;
  inline void clear_distribution_key();
  static const int kDistributionKeyFieldNumber = 4;
  inline bool distribution_key() const;
  inline void set_distribution_key(bool value);

  // required bytes value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ColumnValue)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_primary_key();
  inline void clear_has_primary_key();
  inline void set_has_distribution_key();
  inline void clear_has_distribution_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  bool primary_key_;
  bool distribution_key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_Column_2eproto();
  friend void protobuf_AssignDesc_Column_2eproto();
  friend void protobuf_ShutdownFile_Column_2eproto();

  void InitAsDefaultInstance();
  static ColumnValue* default_instance_;
};
// ===================================================================


// ===================================================================

// Column

// required string name = 1;
inline bool Column::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Column::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Column::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Column::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:Column.name)
  return *name_;
}
inline void Column::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Column.name)
}
inline void Column::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Column.name)
}
inline void Column::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Column.name)
}
inline ::std::string* Column::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Column.name)
  return name_;
}
inline ::std::string* Column::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Column::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Column.name)
}

// optional .Column.Type type = 2;
inline bool Column::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Column::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Column::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Column::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Column_Type Column::type() const {
  // @@protoc_insertion_point(field_get:Column.type)
  return static_cast< ::Column_Type >(type_);
}
inline void Column::set_type(::Column_Type value) {
  assert(::Column_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Column.type)
}

// optional bool primary_key = 3;
inline bool Column::has_primary_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Column::set_has_primary_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Column::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Column::clear_primary_key() {
  primary_key_ = false;
  clear_has_primary_key();
}
inline bool Column::primary_key() const {
  // @@protoc_insertion_point(field_get:Column.primary_key)
  return primary_key_;
}
inline void Column::set_primary_key(bool value) {
  set_has_primary_key();
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:Column.primary_key)
}

// optional bool distribution_key = 4;
inline bool Column::has_distribution_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Column::set_has_distribution_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Column::clear_has_distribution_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Column::clear_distribution_key() {
  distribution_key_ = false;
  clear_has_distribution_key();
}
inline bool Column::distribution_key() const {
  // @@protoc_insertion_point(field_get:Column.distribution_key)
  return distribution_key_;
}
inline void Column::set_distribution_key(bool value) {
  set_has_distribution_key();
  distribution_key_ = value;
  // @@protoc_insertion_point(field_set:Column.distribution_key)
}

// -------------------------------------------------------------------

// ColumnInfo

// required string name = 1;
inline bool ColumnInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ColumnInfo::name() const {
  // @@protoc_insertion_point(field_get:ColumnInfo.name)
  return *name_;
}
inline void ColumnInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ColumnInfo.name)
}
inline void ColumnInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ColumnInfo.name)
}
inline void ColumnInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ColumnInfo.name)
}
inline ::std::string* ColumnInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ColumnInfo.name)
  return name_;
}
inline ::std::string* ColumnInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ColumnInfo.name)
}

// required .Column.Type type = 2;
inline bool ColumnInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Column_Type ColumnInfo::type() const {
  // @@protoc_insertion_point(field_get:ColumnInfo.type)
  return static_cast< ::Column_Type >(type_);
}
inline void ColumnInfo::set_type(::Column_Type value) {
  assert(::Column_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ColumnInfo.type)
}

// optional bool primary_key = 3;
inline bool ColumnInfo::has_primary_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnInfo::set_has_primary_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnInfo::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnInfo::clear_primary_key() {
  primary_key_ = false;
  clear_has_primary_key();
}
inline bool ColumnInfo::primary_key() const {
  // @@protoc_insertion_point(field_get:ColumnInfo.primary_key)
  return primary_key_;
}
inline void ColumnInfo::set_primary_key(bool value) {
  set_has_primary_key();
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:ColumnInfo.primary_key)
}

// optional bool distribution_key = 4;
inline bool ColumnInfo::has_distribution_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnInfo::set_has_distribution_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnInfo::clear_has_distribution_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnInfo::clear_distribution_key() {
  distribution_key_ = false;
  clear_has_distribution_key();
}
inline bool ColumnInfo::distribution_key() const {
  // @@protoc_insertion_point(field_get:ColumnInfo.distribution_key)
  return distribution_key_;
}
inline void ColumnInfo::set_distribution_key(bool value) {
  set_has_distribution_key();
  distribution_key_ = value;
  // @@protoc_insertion_point(field_set:ColumnInfo.distribution_key)
}

// optional int32 length = 6;
inline bool ColumnInfo::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnInfo::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnInfo::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnInfo::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 ColumnInfo::length() const {
  // @@protoc_insertion_point(field_get:ColumnInfo.length)
  return length_;
}
inline void ColumnInfo::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:ColumnInfo.length)
}

// -------------------------------------------------------------------

// ColumnValue

// required string name = 1;
inline bool ColumnValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnValue::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ColumnValue::name() const {
  // @@protoc_insertion_point(field_get:ColumnValue.name)
  return *name_;
}
inline void ColumnValue::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ColumnValue.name)
}
inline void ColumnValue::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ColumnValue.name)
}
inline void ColumnValue::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ColumnValue.name)
}
inline ::std::string* ColumnValue::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ColumnValue.name)
  return name_;
}
inline ::std::string* ColumnValue::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnValue::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ColumnValue.name)
}

// optional .Column.Type type = 2;
inline bool ColumnValue::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnValue::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnValue::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Column_Type ColumnValue::type() const {
  // @@protoc_insertion_point(field_get:ColumnValue.type)
  return static_cast< ::Column_Type >(type_);
}
inline void ColumnValue::set_type(::Column_Type value) {
  assert(::Column_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ColumnValue.type)
}

// optional bool primary_key = 3;
inline bool ColumnValue::has_primary_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnValue::set_has_primary_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnValue::clear_has_primary_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnValue::clear_primary_key() {
  primary_key_ = false;
  clear_has_primary_key();
}
inline bool ColumnValue::primary_key() const {
  // @@protoc_insertion_point(field_get:ColumnValue.primary_key)
  return primary_key_;
}
inline void ColumnValue::set_primary_key(bool value) {
  set_has_primary_key();
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:ColumnValue.primary_key)
}

// optional bool distribution_key = 4;
inline bool ColumnValue::has_distribution_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnValue::set_has_distribution_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnValue::clear_has_distribution_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnValue::clear_distribution_key() {
  distribution_key_ = false;
  clear_has_distribution_key();
}
inline bool ColumnValue::distribution_key() const {
  // @@protoc_insertion_point(field_get:ColumnValue.distribution_key)
  return distribution_key_;
}
inline void ColumnValue::set_distribution_key(bool value) {
  set_has_distribution_key();
  distribution_key_ = value;
  // @@protoc_insertion_point(field_set:ColumnValue.distribution_key)
}

// required bytes value = 5;
inline bool ColumnValue::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnValue::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnValue::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ColumnValue::value() const {
  // @@protoc_insertion_point(field_get:ColumnValue.value)
  return *value_;
}
inline void ColumnValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:ColumnValue.value)
}
inline void ColumnValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:ColumnValue.value)
}
inline void ColumnValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ColumnValue.value)
}
inline ::std::string* ColumnValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ColumnValue.value)
  return value_;
}
inline ::std::string* ColumnValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ColumnValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ColumnValue.value)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Column_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Column_Type>() {
  return ::Column_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Column_2eproto__INCLUDED
