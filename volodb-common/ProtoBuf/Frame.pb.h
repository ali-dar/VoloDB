// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frame.proto

#ifndef PROTOBUF_Frame_2eproto__INCLUDED
#define PROTOBUF_Frame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Frame_2eproto();
void protobuf_AssignDesc_Frame_2eproto();
void protobuf_ShutdownFile_Frame_2eproto();

class FrameItem;
class Frame;

enum FrameItem_Type {
  FrameItem_Type_NONE = 1,
  FrameItem_Type_CREATE_DATABASE = 2,
  FrameItem_Type_DROP_DATABASE = 3,
  FrameItem_Type_CREATE_STORE = 4,
  FrameItem_Type_DROP_STORE = 5,
  FrameItem_Type_SET = 6,
  FrameItem_Type_GET = 7,
  FrameItem_Type_DELETE = 8,
  FrameItem_Type_SERVER_RESPONSE = 9
};
bool FrameItem_Type_IsValid(int value);
const FrameItem_Type FrameItem_Type_Type_MIN = FrameItem_Type_NONE;
const FrameItem_Type FrameItem_Type_Type_MAX = FrameItem_Type_SERVER_RESPONSE;
const int FrameItem_Type_Type_ARRAYSIZE = FrameItem_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameItem_Type_descriptor();
inline const ::std::string& FrameItem_Type_Name(FrameItem_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameItem_Type_descriptor(), value);
}
inline bool FrameItem_Type_Parse(
    const ::std::string& name, FrameItem_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameItem_Type>(
    FrameItem_Type_descriptor(), name, value);
}
// ===================================================================

class FrameItem : public ::google::protobuf::Message {
 public:
  FrameItem();
  virtual ~FrameItem();

  FrameItem(const FrameItem& from);

  inline FrameItem& operator=(const FrameItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameItem& default_instance();

  void Swap(FrameItem* other);

  // implements Message ----------------------------------------------

  FrameItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameItem& from);
  void MergeFrom(const FrameItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FrameItem_Type Type;
  static const Type NONE = FrameItem_Type_NONE;
  static const Type CREATE_DATABASE = FrameItem_Type_CREATE_DATABASE;
  static const Type DROP_DATABASE = FrameItem_Type_DROP_DATABASE;
  static const Type CREATE_STORE = FrameItem_Type_CREATE_STORE;
  static const Type DROP_STORE = FrameItem_Type_DROP_STORE;
  static const Type SET = FrameItem_Type_SET;
  static const Type GET = FrameItem_Type_GET;
  static const Type DELETE = FrameItem_Type_DELETE;
  static const Type SERVER_RESPONSE = FrameItem_Type_SERVER_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return FrameItem_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FrameItem_Type_Type_MIN;
  static const Type Type_MAX =
    FrameItem_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FrameItem_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FrameItem_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FrameItem_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FrameItem_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .FrameItem.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::FrameItem_Type type() const;
  inline void set_type(::FrameItem_Type value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string identifier = 3;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 3;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // @@protoc_insertion_point(class_scope:FrameItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_identifier();
  inline void clear_has_identifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::std::string* identifier_;
  int type_;
  friend void  protobuf_AddDesc_Frame_2eproto();
  friend void protobuf_AssignDesc_Frame_2eproto();
  friend void protobuf_ShutdownFile_Frame_2eproto();

  void InitAsDefaultInstance();
  static FrameItem* default_instance_;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // repeated .FrameItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::FrameItem& item(int index) const;
  inline ::FrameItem* mutable_item(int index);
  inline ::FrameItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::FrameItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::FrameItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Frame)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identifier_;
  ::google::protobuf::RepeatedPtrField< ::FrameItem > item_;
  friend void  protobuf_AddDesc_Frame_2eproto();
  friend void protobuf_AssignDesc_Frame_2eproto();
  friend void protobuf_ShutdownFile_Frame_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// ===================================================================


// ===================================================================

// FrameItem

// required .FrameItem.Type type = 1;
inline bool FrameItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FrameItem_Type FrameItem::type() const {
  // @@protoc_insertion_point(field_get:FrameItem.type)
  return static_cast< ::FrameItem_Type >(type_);
}
inline void FrameItem::set_type(::FrameItem_Type value) {
  assert(::FrameItem_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FrameItem.type)
}

// required bytes data = 2;
inline bool FrameItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameItem::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FrameItem::data() const {
  // @@protoc_insertion_point(field_get:FrameItem.data)
  return *data_;
}
inline void FrameItem::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:FrameItem.data)
}
inline void FrameItem::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:FrameItem.data)
}
inline void FrameItem::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FrameItem.data)
}
inline ::std::string* FrameItem::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FrameItem.data)
  return data_;
}
inline ::std::string* FrameItem::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrameItem::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FrameItem.data)
}

// optional string identifier = 3;
inline bool FrameItem::has_identifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameItem::set_has_identifier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameItem::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameItem::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& FrameItem::identifier() const {
  // @@protoc_insertion_point(field_get:FrameItem.identifier)
  return *identifier_;
}
inline void FrameItem::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set:FrameItem.identifier)
}
inline void FrameItem::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set_char:FrameItem.identifier)
}
inline void FrameItem::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FrameItem.identifier)
}
inline ::std::string* FrameItem::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FrameItem.identifier)
  return identifier_;
}
inline ::std::string* FrameItem::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrameItem::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FrameItem.identifier)
}

// -------------------------------------------------------------------

// Frame

// optional string identifier = 1;
inline bool Frame::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& Frame::identifier() const {
  // @@protoc_insertion_point(field_get:Frame.identifier)
  return *identifier_;
}
inline void Frame::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set:Frame.identifier)
}
inline void Frame::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
  // @@protoc_insertion_point(field_set_char:Frame.identifier)
}
inline void Frame::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Frame.identifier)
}
inline ::std::string* Frame::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identifier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Frame.identifier)
  return identifier_;
}
inline ::std::string* Frame::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Frame::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Frame.identifier)
}

// repeated .FrameItem item = 2;
inline int Frame::item_size() const {
  return item_.size();
}
inline void Frame::clear_item() {
  item_.Clear();
}
inline const ::FrameItem& Frame::item(int index) const {
  // @@protoc_insertion_point(field_get:Frame.item)
  return item_.Get(index);
}
inline ::FrameItem* Frame::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.item)
  return item_.Mutable(index);
}
inline ::FrameItem* Frame::add_item() {
  // @@protoc_insertion_point(field_add:Frame.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FrameItem >&
Frame::item() const {
  // @@protoc_insertion_point(field_list:Frame.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::FrameItem >*
Frame::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Frame.item)
  return &item_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FrameItem_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrameItem_Type>() {
  return ::FrameItem_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Frame_2eproto__INCLUDED
